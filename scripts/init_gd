#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Prepares system state for GitDeploy.
"""

import sys
import os
import io
import argparse
import ConfigParser
import subprocess
import shutil

from git_deploy.config import configure, log, set_log, GitDeployConfigError

INI_FILE = 'scripts/git-deploy.ini'


def parseargs():
    """Parse command line arguments.

    Returns *args*, the list of arguments left over after processing.

    """
    parser = argparse.ArgumentParser(
        description="This script serves as the entry point for git deploy.",
        epilog="",
        conflict_handler="resolve",
        usage="git-deploy method [remote] [branch]"
              "\n\t[-q --quiet] \n\t[-s --silent] "
              "\n\t[-v --verbose] \n\t[-c --count [0-9]+] \n\t[-f --force] "
              "\n\t[-t --tag] \n\t[-a --auto_sync] "
              "\n\t[-y --sync SCRIPT NAME] "
              "\n\nmethod=[start|sync|abort|revert|diff|show_tag|"
              "log_deploys|finish]"
    )

    parser.allow_interspersed_args = False

    defaults = {
        "quiet": 0,
        "silent": False,
        "verbose": 1,
    }

    # Global options.
    parser.add_argument("-q", "--quiet",
                        default=defaults["quiet"], action="count",
                        help="decrease the logging verbosity")
    parser.add_argument("-s", "--silent",
                        default=defaults["silent"], action="store_true",
                        help="silence the logger")
    parser.add_argument("-v", "--verbose",
                        default=defaults["verbose"], action="count",
                        help="increase the logging verbosity")

    return parser.parse_args()


def git_config_global_set(section, prop, value):
    proc = subprocess.Popen("git config --global {0}.{1} {2}".format(
        section, prop, value
    ).split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    proc.communicate()


def create_hook_tree(config):
    """ Sets up hooking paths for git deploy

    :param config: git-deploy configuration

    #
    # $GIT_WORK_DIR/deploy/                   # deploy directory
    #                     /apps/              # Directory per application + 'common'
    #                          /common/       # deploy scripts that apply to all apps
    #                          /$app/         # deploy scripts for a specific $app
    #                     /sync/              # sync
    #                          /$app.sync

    """

    log.info("{0} :: Creating deploy tree.".format(__name__))

    if os.path.exists(config['deploy_root']):
        shutil.rmtree(config['deploy_root'])

    os.mkdir(config['deploy_root'])
    os.mkdir(config['deploy_apps'])
    os.mkdir(config['deploy_apps_common'])
    os.mkdir(config['deploy_sync'])

    shutil.copy('git_deploy/default.sync', config['deploy_sync'])


def main():

    args = parseargs()
    set_log(args, sys.stdout, sys.stderr)

    # Process INI
    try:
        with file(INI_FILE, 'r') as f:
            config_handle = f.read()
        config = ConfigParser.RawConfigParser(allow_no_value=True)
        config.readfp(io.BytesIO(config_handle))
    except IOError:
        log.error(__name__ + ' :: Could not find .ini.')
        return

    # Set the ini conf
    for section in config.sections():
        for name, value in config.items(section):
            # git config
            if section == 'deploy':
                log.info("{0} :: Setting config for {1}.{2} @ {3}".format(
                    __name__, section, name, value))
                git_config_global_set(section, name, value)

            # cp git-deploy
            if section == 'system' and name == 'run_root':
                log.info("{0} :: Adding git-deploy exec to '{1}'".format(
                    __name__, value
                ))
                shutil.copy('scripts/git-deploy', value)

    try:
        log.info("{0} :: loading config ...".format(__name__))
        _config = configure()
    except GitDeployConfigError as e:
        log.error("{0} :: call to configure() failed - '{1}'".format(
            __name__, e.message))
        sys.exit(e.exit_code)

    # create deploy tree
    create_hook_tree(_config)


def cli():
    sys.exit(main())

if __name__ == "__main__":  # pragma: nocover
    cli()
